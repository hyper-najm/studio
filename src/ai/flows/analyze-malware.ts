// Use server directive.
'use server';

/**
 * @fileOverview AI-powered malware analysis flow.
 *
 * - analyzeMalware - Analyzes file names, text content/descriptions, and uploaded file data (like images) for malware characteristics.
 * - AnalyzeMalwareInput - The input type for the analyzeMalware function.
 * - AnalyzeMalwareOutput - The return type for the analyzeMalware function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeMalwareInputSchema = z.object({
  fileName: z.string().optional().describe('The name of the file being analyzed (e.g., "suspicious.exe", "document.pdf").'),
  textContent: z.string().optional().describe('Textual content of the file (if text-based and reasonably small), or a detailed description of the file, its origin, observed behavior, or any suspicious code snippets.'),
  fileDataUri: z.string().optional().describe("A data URI of an uploaded file (e.g., an image) that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'. This is used if the file is an image or other media type supported by the model for visual analysis."),
}).refine(data => data.fileDataUri || (data.textContent && data.textContent.length >= 20), {
  message: "Either an image file must be provided for visual analysis, or the textual content/description must be at least 20 characters.",
  // path: ["textContent"], // You can specify a path if the error is specific to one field
});

export type AnalyzeMalwareInput = z.infer<typeof AnalyzeMalwareInputSchema>;

const AnalyzeMalwareOutputSchema = z.object({
  isMalware: z.boolean().describe('Whether malware is detected based on the provided information.'),
  malwareType: z.string().optional().describe('The type of malware if detected (e.g., "Ransomware", "Spyware", "Trojan", "Virus", "Adware"). Empty if not malware or type is unknown.'),
  confidenceScore: z.number().min(0).max(100).describe('A numerical score from 0 to 100 indicating the confidence in the malware detection. 0 means no confidence it is malware, 100 means high confidence it is malware.'),
  analysisDetails: z.string().describe('A detailed explanation of the findings, including indicators of compromise (IOCs) if any, and the reasoning behind the detection or lack thereof.'),
  recommendedActions: z.array(z.string()).describe('A list of actionable steps to take if malware is detected (e.g., "Quarantine file", "Disconnect from network", "Run full system scan"). Empty if no malware detected or no specific actions recommended.'),
});
export type AnalyzeMalwareOutput = z.infer<typeof AnalyzeMalwareOutputSchema>;

export async function analyzeMalware(input: AnalyzeMalwareInput): Promise<AnalyzeMalwareOutput> {
  return analyzeMalwareFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeMalwarePrompt',
  input: {schema: AnalyzeMalwareInputSchema},
  output: {schema: AnalyzeMalwareOutputSchema},
  prompt: `You are a sophisticated malware analysis engine. Your task is to analyze the provided information (file name, textual content/description, and potentially uploaded file data like an image) to determine if it indicates the presence of malware.

Provided Information:
File Name: {{#if fileName}}"{{{fileName}}}"{{else}}Not provided{{/if}}
{{#if textContent}}
Textual Content / Description:
{{{textContent}}}
{{/if}}
{{#if fileDataUri}}
Uploaded File Data (if image/media): {{media url=fileDataUri}}
Instruction for image: If an image is provided, consider it as potential evidence. This could involve looking for steganographically hidden data (if described in textContent), visual cues of a malicious site or document if it's a screenshot, or analyzing if the image itself could be part of a multi-stage attack payload (based on context from textContent or fileName).
{{/if}}

Based on ALL available information, please:
1.  Determine if malware is present (isMalware: true/false).
2.  If malware is detected, identify its type (malwareType).
3.  Provide a confidence score (0-100) for your detection (confidenceScore).
4.  Give a detailed analysis (analysisDetails), explaining your reasoning, potential indicators of compromise (IOCs) if applicable (like suspicious URLs, file hashes patterns, registry key patterns mentioned in description or potentially inferred from image context if provided).
5.  Suggest recommended actions if malware is detected (recommendedActions).

Respond strictly in the following JSON format.
Ensure all fields in the output schema are addressed. If malware is not detected, malwareType can be empty or "N/A", and recommendedActions can be an empty array. The confidenceScore should reflect your certainty (e.g., low if not malware, high if malware with strong indicators). If only an image is provided with minimal text, base your analysis on the image and any inferred context.
`,
});

const analyzeMalwareFlow = ai.defineFlow(
  {
    name: 'analyzeMalwareFlow',
    inputSchema: AnalyzeMalwareInputSchema,
    outputSchema: AnalyzeMalwareOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
