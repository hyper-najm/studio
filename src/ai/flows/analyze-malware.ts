// Use server directive.
'use server';

/**
 * @fileOverview AI-powered malware analysis flow.
 *
 * - analyzeMalware - Analyzes file names and text content/descriptions for malware characteristics.
 * - AnalyzeMalwareInput - The input type for the analyzeMalware function.
 * - AnalyzeMalwareOutput - The return type for the analyzeMalware function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeMalwareInputSchema = z.object({
  fileName: z.string().optional().describe('The name of the file being analyzed (e.g., "suspicious.exe", "document.pdf").'),
  textContent: z.string().min(20, { message: "Text content or description must be at least 20 characters."}).describe('Textual content of the file (if text-based and reasonably small), or a detailed description of the file, its origin, observed behavior, or any suspicious code snippets.'),
});
export type AnalyzeMalwareInput = z.infer<typeof AnalyzeMalwareInputSchema>;

const AnalyzeMalwareOutputSchema = z.object({
  isMalware: z.boolean().describe('Whether malware is detected based on the provided information.'),
  malwareType: z.string().optional().describe('The type of malware if detected (e.g., "Ransomware", "Spyware", "Trojan", "Virus", "Adware"). Empty if not malware or type is unknown.'),
  confidenceScore: z.number().min(0).max(100).describe('A numerical score from 0 to 100 indicating the confidence in the malware detection. 0 means no confidence it is malware, 100 means high confidence it is malware.'),
  analysisDetails: z.string().describe('A detailed explanation of the findings, including indicators of compromise (IOCs) if any, and the reasoning behind the detection or lack thereof.'),
  recommendedActions: z.array(z.string()).describe('A list of actionable steps to take if malware is detected (e.g., "Quarantine file", "Disconnect from network", "Run full system scan"). Empty if no malware detected or no specific actions recommended.'),
});
export type AnalyzeMalwareOutput = z.infer<typeof AnalyzeMalwareOutputSchema>;

export async function analyzeMalware(input: AnalyzeMalwareInput): Promise<AnalyzeMalwareOutput> {
  return analyzeMalwareFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeMalwarePrompt',
  input: {schema: AnalyzeMalwareInputSchema},
  output: {schema: AnalyzeMalwareOutputSchema},
  prompt: `You are a sophisticated malware analysis engine. Your task is to analyze the provided information (file name and textual content/description) to determine if it indicates the presence of malware.

Provided Information:
File Name: {{#if fileName}}"{{{fileName}}}"{{else}}Not provided{{/if}}
Textual Content / Description:
{{{textContent}}}

Based on this information, please:
1.  Determine if malware is present (isMalware: true/false).
2.  If malware is detected, identify its type (malwareType).
3.  Provide a confidence score (0-100) for your detection (confidenceScore).
4.  Give a detailed analysis (analysisDetails), explaining your reasoning, potential indicators of compromise (IOCs) if applicable (like suspicious URLs, file hashes patterns, registry key patterns mentioned in description).
5.  Suggest recommended actions if malware is detected (recommendedActions).

Respond strictly in the following JSON format.
Ensure all fields in the output schema are addressed. If malware is not detected, malwareType can be empty or "N/A", and recommendedActions can be an empty array. The confidenceScore should reflect your certainty (e.g., low if not malware, high if malware with strong indicators).
`,
});

const analyzeMalwareFlow = ai.defineFlow(
  {
    name: 'analyzeMalwareFlow',
    inputSchema: AnalyzeMalwareInputSchema,
    outputSchema: AnalyzeMalwareOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
