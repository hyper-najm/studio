'use client';

import { useState, useEffect } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { analyzeMalware } from '@/lib/actions';
import type { AnalyzeMalwareOutput, AnalyzeMalwareInput } from '@/ai/flows/analyze-malware';
import { Loader2, ShieldX, AlertTriangle, Info, CheckCircle, FileWarning } from 'lucide-react';

const formSchema = z.object({
  fileName: z.string().optional(),
  textContent: z.string().min(20, { message: 'Text content or description must be at least 20 characters long.' }).max(5000, { message: 'Text content is too long (max 5000 characters).' }),
});

type FormData = z.infer<typeof formSchema>;

export default function MalwareDetectorPage() {
  const [analysisResult, setAnalysisResult] = useState<AnalyzeMalwareOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      fileName: '',
      textContent: '',
    },
  });

  const onSubmit: SubmitHandler<FormData> = async (data) => {
    setIsLoading(true);
    setError(null);
    setAnalysisResult(null);
    try {
      const result = await analyzeMalware(data);
      setAnalysisResult(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred during analysis.');
    } finally {
      setIsLoading(false);
    }
  };
  
  const getRiskColor = (score: number) => {
    if (score > 70) return "text-destructive";
    if (score > 40) return "text-yellow-500";
    return "text-green-500";
  };

  const getRiskProgressClass = (score: number) => {
    if (score > 70) return "h-3 [&>div]:bg-destructive";
    if (score > 40) return "h-3 [&>div]:bg-yellow-500";
    return "h-3 [&>div]:bg-green-500";
  };


  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><ShieldX />Malware Detector</CardTitle>
          <CardDescription>
            Analyze file names and textual content (like code snippets, scripts, or detailed descriptions of file behavior) for potential malware threats.
          </CardDescription>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="fileName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel htmlFor="fileName-input">File Name (Optional)</FormLabel>
                    <FormControl>
                      <Input
                        id="fileName-input"
                        placeholder="e.g., suspicious_script.py, downloaded_archive.zip"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="textContent"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel htmlFor="textContent-input">Text Content / Description</FormLabel>
                    <FormControl>
                      <Textarea
                        id="textContent-input"
                        placeholder="Paste file content (for text-based files like scripts), code snippets, or a detailed description of the file's source, behavior, and any suspicious characteristics observed."
                        className="min-h-[180px] resize-y"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            <CardFooter>
              <Button type="submit" disabled={isLoading} className="w-full sm:w-auto">
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  'Analyze for Malware'
                )}
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>

      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Analysis Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {analysisResult && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {analysisResult.isMalware ? 
                <FileWarning className={`h-6 w-6 ${getRiskColor(analysisResult.confidenceScore)}`} /> : 
                <CheckCircle className="h-6 w-6 text-green-500" />
              }
              Malware Analysis Report
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div>
              <h3 className="font-semibold text-lg mb-2">Detection Status:</h3>
              <Alert variant={analysisResult.isMalware ? "destructive" : "default"} className={!analysisResult.isMalware ? "border-green-500 bg-green-500/10" : ""}>
                 {analysisResult.isMalware ? <FileWarning className="h-4 w-4" /> : <CheckCircle className="h-4 w-4 text-green-600" />}
                <AlertTitle>{analysisResult.isMalware ? "Malware Detected" : "No Malware Detected"}</AlertTitle>
                <AlertDescription>
                  {analysisResult.isMalware ? 
                    `Potential malware identified with type: ${analysisResult.malwareType || "Unknown"}.` :
                    "The provided information does not strongly indicate malware."}
                </AlertDescription>
              </Alert>
            </div>
            
            <div>
                <h3 className={`font-semibold text-lg mb-1 ${getRiskColor(analysisResult.confidenceScore)}`}>
                    Confidence Score: {analysisResult.confidenceScore}/100
                </h3>
                <Progress value={analysisResult.confidenceScore} className={getRiskProgressClass(analysisResult.confidenceScore)} />
                <p className="text-xs text-muted-foreground mt-1">
                    {analysisResult.confidenceScore > 70 ? "High confidence of malware." : analysisResult.confidenceScore > 40 ? "Moderate confidence, further investigation advised." : "Low confidence of malware or benign."}
                </p>
            </div>

            {analysisResult.malwareType && analysisResult.isMalware && (
                 <div>
                    <h3 className="font-semibold text-lg mb-1">Malware Type:</h3>
                     <p className="text-sm p-3 rounded-md border bg-muted/30">{analysisResult.malwareType}</p>
                </div>
            )}

            <div>
              <h3 className="font-semibold text-lg mb-1">Analysis Details:</h3>
              <div className="p-3 rounded-md border bg-muted/30 text-sm max-h-60 overflow-y-auto">
                <p className="whitespace-pre-wrap">{analysisResult.analysisDetails}</p>
              </div>
            </div>

            {analysisResult.recommendedActions && analysisResult.recommendedActions.length > 0 && (
              <div>
                <h3 className="font-semibold text-lg mb-1">Recommended Actions:</h3>
                <ul className="list-disc list-inside space-y-1 rounded-md border p-3 bg-muted/30 text-sm">
                  {analysisResult.recommendedActions.map((action, index) => (
                    <li key={index}>{action}</li>
                  ))}
                </ul>
              </div>
            )}
             {!analysisResult.isMalware && (!analysisResult.recommendedActions || analysisResult.recommendedActions.length === 0) && (
                <div className="text-sm text-muted-foreground p-3 rounded-md border bg-muted/30">
                    No specific actions recommended based on this analysis.
                </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
