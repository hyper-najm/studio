
'use client';

import { useState, useEffect, useRef } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { analyzeMalware } from '@/lib/actions';
import type { AnalyzeMalwareOutput, AnalyzeMalwareInput } from '@/ai/flows/analyze-malware';
import { Loader2, ShieldX, AlertTriangle, Info, CheckCircle, FileWarning, Upload, Mic } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const ACCEPTED_FILE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'text/plain', 'text/csv', 'text/html', 'text/css', 'application/javascript', 'application/json', 'application/xml', 'text/markdown', 'application/x-python-script', 'application/x-sh'];
const MAX_FILE_SIZE_MB = 5;
const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;

const formSchema = z.object({
  fileName: z.string().optional(), // Will be auto-filled from uploaded file if provided
  file: z.custom<File | undefined>((val) => typeof window === 'undefined' || val === undefined || val instanceof File, {
    message: "Invalid file.",
  })
  .refine(file => file ? file.size <= MAX_FILE_SIZE_BYTES : true, `File size should be less than ${MAX_FILE_SIZE_MB}MB.`)
  .refine(file => file ? ACCEPTED_FILE_TYPES.includes(file.type) || file.name.endsWith('.py') || file.name.endsWith('.sh') || file.name.endsWith('.bat') : true, 
    "Unsupported file type. Please upload an image (JPEG, PNG, GIF, WEBP), a common text file, or a script.")
  .optional(),
  manualDescription: z.string().max(5000, { message: 'Manual description is too long (max 5000 characters).' }).optional(),
}).refine(data => {
  if (data.file) {
    const isImage = data.file.type.startsWith('image/');
    const isText = data.file.type.startsWith('text/') || ['application/javascript', 'application/x-python-script', 'application/x-sh', 'application/json', 'application/xml', 'text/markdown', 'text/html', 'text/css'].includes(data.file.type) || data.file.name.endsWith('.py') || data.file.name.endsWith('.sh') || data.file.name.endsWith('.bat');
    if (!isImage && !isText) { 
      return data.manualDescription && data.manualDescription.length >= 20;
    }
    return true; 
  }
  return data.manualDescription && data.manualDescription.length >= 20;
}, {
  message: "Provide a manual description of at least 20 characters, especially if not uploading a file or if uploading a binary file type.",
  path: ["manualDescription"],
});

type FormData = z.infer<typeof formSchema>;

export default function MalwareDetectorPage() {
  const [analysisResult, setAnalysisResult] = useState<AnalyzeMalwareOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [errorState, setErrorState] = useState<string | null>(null);
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      fileName: '',
      file: undefined,
      manualDescription: '',
    },
  });

  const { setValue, watch, formState: { errors } } = form;
  const selectedFile = watch('file');

  useEffect(() => {
    if (errors.manualDescription?.message && errors.manualDescription.message.includes("20 characters") && !selectedFile) {
        toast({
            variant: "destructive",
            title: "Input Required",
            description: "Please upload a file or provide a manual description of at least 20 characters.",
        });
    }
  }, [errors.manualDescription, selectedFile, toast]);


  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setValue('file', file, { shouldValidate: true });
      setValue('fileName', file.name);
    } else {
      setValue('file', undefined, { shouldValidate: true });
      setValue('fileName', '');
    }
  };
  
  const onSubmit: SubmitHandler<FormData> = async (data) => {
    setIsLoading(true);
    setErrorState(null);
    setAnalysisResult(null);
    form.clearErrors(); 

    try {
      const { fileName: formFileNameInput, file, manualDescription } = data;
      
      let submissionFileName = formFileNameInput || (file ? file.name : undefined);
      let submissionTextContent = manualDescription || "";
      let submissionFileDataUri: string | undefined = undefined;

      let isNonAnalyzableBinary = false;

      if (file) {
        submissionFileName = file.name; 

        if (file.type.startsWith('image/')) {
          submissionFileDataUri = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = (error) => reject(error);
            reader.readAsDataURL(file);
          });
        } else if (ACCEPTED_FILE_TYPES.includes(file.type) || file.name.endsWith('.py') || file.name.endsWith('.sh') || file.name.endsWith('.bat')) {
          const textFromFile = await file.text();
          if (submissionTextContent && textFromFile) {
            submissionTextContent += `\n\n--- Uploaded File Content (${file.name}) ---\n${textFromFile}`;
          } else if (textFromFile) {
            submissionTextContent = `--- Uploaded File Content (${file.name}) ---\n${textFromFile}`;
          }
        } else {
          isNonAnalyzableBinary = true;
          if (!manualDescription || manualDescription.length < 20) {
            form.setError("manualDescription", { type: "manual", message: `For binary file '${file.name}', a detailed manual description of at least 20 characters is required.` });
            toast({ variant: "destructive", title: "Description Required", description: `For binary file '${file.name}', please provide a detailed manual description of at least 20 characters.`});
            setIsLoading(false);
            return;
          }
        }
      }
      
      if (!submissionFileDataUri && (!submissionTextContent || submissionTextContent.length < 20)) {
        form.setError("manualDescription", { type: "manual", message: "A textual description of at least 20 characters is required if no image is uploaded or if the uploaded file is not text-based." });
        toast({ variant: "destructive", title: "Input Required", description: "A textual description of at least 20 characters is required if no image is uploaded or if the uploaded file is not text-based."});
        setIsLoading(false);
        return;
      }

      const aiInput: AnalyzeMalwareInput = {
        fileName: submissionFileName,
        textContent: submissionTextContent || undefined, 
        fileDataUri: submissionFileDataUri,
      };
      
      const result = await analyzeMalware(aiInput);
      setAnalysisResult(result);
      if (isNonAnalyzableBinary) {
        toast({title: "Analysis Note", description: `Analysis for '${file?.name}' was based on its name and your manual description, as its content type is not directly analyzable by the AI.`});
      }

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred during analysis.';
      setErrorState(errorMessage);
      toast({ variant: "destructive", title: "Analysis Error", description: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };
  
  const getRiskColor = (score: number) => {
    if (score > 70) return "text-destructive";
    if (score > 40) return "text-yellow-500";
    return "text-green-500";
  };

  const getRiskProgressClass = (score: number) => {
    if (score > 70) return "h-3 [&>div]:bg-destructive";
    if (score > 40) return "h-3 [&>div]:bg-yellow-500";
    return "h-3 [&>div]:bg-green-500";
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><ShieldX />Malware Detector</CardTitle>
          <CardDescription>
            Upload an image or text-based file, or provide a file name and detailed description to analyze for potential malware. Receive educational feedback and actionable recommendations.
          </CardDescription>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="file"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel htmlFor="file-input">Upload File (Image, Text, Script)</FormLabel>
                    <div className="flex items-center gap-2">
                      <Input
                        id="file-input"
                        type="file"
                        ref={fileInputRef}
                        onChange={handleFileChange}
                        className="block w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20"
                        accept={ACCEPTED_FILE_TYPES.join(',')}
                      />
                    </div>
                    {selectedFile && (
                      <p className="text-sm text-muted-foreground mt-1">
                        Selected: {selectedFile.name} ({(selectedFile.size / 1024).toFixed(2)} KB)
                      </p>
                    )}
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="fileName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel htmlFor="fileName-input">File Name (if no file uploaded, or to override)</FormLabel>
                    <FormControl>
                      <Input
                        id="fileName-input"
                        placeholder="e.g., suspicious_script.py"
                        {...field}
                        disabled={!!selectedFile} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="manualDescription"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel htmlFor="manualDescription-input">Manual Description / Text Content</FormLabel>
                    <div className="relative">
                      <FormControl>
                        <Textarea
                          id="manualDescription-input"
                          placeholder="If uploading a text file, its content will be appended here. Otherwise, paste file content (for scripts), code snippets, or a detailed description of the file's source, behavior, and any suspicious characteristics observed."
                          className="min-h-[150px] resize-y pr-10"
                          {...field}
                        />
                      </FormControl>
                       <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => toast({ title: "Voice Input", description: "Voice input feature coming soon!" })}
                        aria-label="Use voice input for description"
                        className="absolute right-1 top-1.5 text-muted-foreground hover:text-foreground"
                      >
                        <Mic className="h-5 w-5" />
                      </Button>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            <CardFooter>
              <Button type="submit" disabled={isLoading} className="w-full sm:w-auto">
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  'Analyze for Malware'
                )}
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>

      {errorState && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Analysis Error</AlertTitle>
          <AlertDescription>{errorState}</AlertDescription>
        </Alert>
      )}

      {analysisResult && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {analysisResult.isMalware ? 
                <FileWarning className={`h-6 w-6 ${getRiskColor(analysisResult.confidenceScore)}`} /> : 
                <CheckCircle className="h-6 w-6 text-green-500" />
              }
              Malware Analysis Report
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div>
              <h3 className="font-semibold text-lg mb-2">Detection Status:</h3>
              <Alert variant={analysisResult.isMalware ? "destructive" : "default"} className={!analysisResult.isMalware ? "border-green-500 bg-green-500/10" : ""}>
                 {analysisResult.isMalware ? <FileWarning className="h-4 w-4" /> : <CheckCircle className="h-4 w-4 text-green-600" />}
                <AlertTitle>{analysisResult.isMalware ? "Malware Detected" : "No Malware Detected"}</AlertTitle>
                <AlertDescription>
                  {analysisResult.isMalware ? 
                    `Potential malware identified with type: ${analysisResult.malwareType || "Unknown"}.` :
                    "The provided information does not strongly indicate malware."}
                </AlertDescription>
              </Alert>
            </div>
            
            <div>
                <h3 className={`font-semibold text-lg mb-1 ${getRiskColor(analysisResult.confidenceScore)}`}>
                    Confidence Score: {analysisResult.confidenceScore}/100
                </h3>
                <Progress value={analysisResult.confidenceScore} className={getRiskProgressClass(analysisResult.confidenceScore)} />
                <p className="text-xs text-muted-foreground mt-1">
                    {analysisResult.confidenceScore > 70 ? "High confidence of malware." : analysisResult.confidenceScore > 40 ? "Moderate confidence, further investigation advised." : "Low confidence of malware or benign."}
                </p>
            </div>

            {analysisResult.malwareType && analysisResult.isMalware && (
                 <div>
                    <h3 className="font-semibold text-lg mb-1">Malware Type:</h3>
                     <p className="text-sm p-3 rounded-md border bg-muted/30">{analysisResult.malwareType}</p>
                </div>
            )}

            <div>
              <h3 className="font-semibold text-lg mb-1">Analysis Details & Education:</h3>
              <div className="p-3 rounded-md border bg-muted/30 text-sm max-h-80 overflow-y-auto"> {/* Increased max-h */}
                <p className="whitespace-pre-wrap">{analysisResult.analysisDetails}</p>
              </div>
            </div>

            {analysisResult.recommendedActions && analysisResult.recommendedActions.length > 0 && (
              <div>
                <h3 className="font-semibold text-lg mb-1">Recommended Actions & Prevention:</h3>
                <ul className="list-disc list-inside space-y-1 rounded-md border p-3 bg-muted/30 text-sm max-h-60 overflow-y-auto"> {/* Added max-h and overflow */}
                  {analysisResult.recommendedActions.map((action, index) => (
                    <li key={index}>{action}</li>
                  ))}
                </ul>
              </div>
            )}
             {!analysisResult.isMalware && (!analysisResult.recommendedActions || analysisResult.recommendedActions.length === 0) && (
                <div className="text-sm text-muted-foreground p-3 rounded-md border bg-muted/30">
                    No specific actions recommended based on this analysis. Continue practicing good cybersecurity hygiene.
                </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
